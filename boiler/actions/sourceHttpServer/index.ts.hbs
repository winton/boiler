import http, { IncomingMessage, ServerResponse } from "http"
import { performance } from "perf_hooks"

import { BigQuery } from "@google-cloud/bigquery"
import { BigQueryBuffer } from "bigquery-buffer"
import pino from "pino"

{{#contains "bigquery" routes}}
import { BigQueryRoute } from "./routes/bigquery"
{{/contains}}
import { OkRoute } from "./routes/ok"

// ✋ Configure routes
const routes = { BigQueryRoute, OkRoute }

{{#contains "bigquery" routes}}
// ✋ Configure BigQuery
const dataset = "datasetName"
const table = "tableName"

{{/contains}}
interface Route {
  match: (req: http.IncomingMessage) => boolean
  route: (
    req: http.IncomingMessage
  ) => Promise<[number, string]>
}

export class {{class}} {
{{#contains "bigquery" routes}}
  buffer: BigQueryBuffer
{{/contains}}
  log = pino()
  server: http.Server
  shutdown = false

  constructor() {
{{#contains "bigquery" routes}}
    if (process.env.GOOGLE_CLOUD_PROJECT) {
      this.buffer = new BigQueryBuffer(
        new BigQuery(),
        dataset,
        table
      )
    }

{{/contains}}
    this.server = http.createServer(
      this.httpListener.bind(this)
    )

    const handler = this.shutdownHandler.bind(this)

    process.once("uncaughtException", handler)
    process.once("unhandledRejection", handler)
    process.once("SIGINT", handler)
    process.once("SIGTERM", handler)
  }

  async httpListener(
    req: IncomingMessage,
    res: ServerResponse
  ): Promise<void> {
    const now = performance.now()
    let body: string
    let status = 404

    if (this.shutdown) {
      status = 503
    } else {
      ;[status, body] = await this.route(req)
    }

    res.statusCode = status

    res.statusMessage =
      body || http.STATUS_CODES[res.statusCode]

    this.log.info(
      req.url,
      res.statusCode,
      (performance.now() - now).toFixed(3) + "ms"
    )

    res.end()
  }

  async route(
    req: IncomingMessage
  ): Promise<[number, string] | [number]> {
    for (const name in routes) {
      const route: Route = new routes[name](
        this.log,
{{#contains "bigquery" routes}}
        this.buffer
{{/contains}}
      )

      if (route.match(req)) {
        return await route.route(req).catch(e => {
          this.log.error(e)
          return [500]
        })
      }
    }
  }

  shutdownHandler(signalOrError: string | Error): void {
    this.shutdown = true

    if (typeof signalOrError === "string") {
      this.log.info(`Received signal: ${signalOrError}`)
    } else if (signalOrError) {
      this.log.error(signalOrError)
    }

    this.server.close(err => {
{{#contains "bigquery" routes}}
      if (err) {
        this.log.error(err)
      }

      this.buffer
        .close()
        .then(() => {
          process.exit(err ? 1 : 0)
        })
        .catch(e => {
          this.log.error(e)
          process.exit(1)
        })
{{/contains}}
{{#excludes "bigquery" routes}}
      if (err) {
        this.log.error(err)
        process.exit(1)
      }

      process.exit()
{{/excludes}}
    })
  }
}
