import http, { IncomingMessage, ServerResponse } from "http"
import { performance } from "perf_hooks"

{{#contains "bigquery" routes}}
import { BigQuery } from "@google-cloud/bigquery"
import { BigQueryBuffer } from "bigquery-buffer"
{{/contains}}
import pino from "pino"

{{#contains "bigquery" routes}}
import { BigQueryRoute } from "./routes/bigquery"
{{/contains}}
import { OkRoute } from "./routes/ok"

// ✋ Configure routes
const ROUTES = [BigQueryRoute, OkRoute]

{{#contains "bigquery" routes}}
// ✋ Configure BigQuery
const DATASET = "datasetName"
const TABLE = "tableName"

{{/contains}}
interface Route {
  match: (req: http.IncomingMessage) => boolean
  route: (
    req: http.IncomingMessage,
    res: ServerResponse
  ) => Promise<void>
}

export class {{class}} {
{{#contains "bigquery" routes}}
  buffer: BigQueryBuffer
{{/contains}}
  log = pino()
  routes: Route[]
  server: http.Server
  shutdown = false

  constructor() {
{{#contains "bigquery" routes}}
    if (process.env.GOOGLE_CLOUD_PROJECT) {
      this.buffer = new BigQueryBuffer(
        new BigQuery(),
        DATASET,
        TABLE
      )
    }

{{/contains}}
    this.routes = ROUTES.map(R => {
      return new R(this.log{{#contains "bigquery" routes}}, this.buffer{{/contains}})
    })

    this.server = http.createServer(
      this.httpListener.bind(this)
    )

    const handler = this.shutdownHandler.bind(this)

    process.once("uncaughtException", handler)
    process.once("unhandledRejection", handler)
    process.once("SIGINT", handler)
    process.once("SIGTERM", handler)
  }

  async httpListener(
    req: IncomingMessage,
    res: ServerResponse
  ): Promise<void> {
    const now = performance.now()

    let status: number

    if (this.shutdown) {
      status = 503
    } else {
      status = await this.route(req, res)
    }

    res.statusCode = status
    res.statusMessage = http.STATUS_CODES[res.statusCode]

    const time = performance.now() - now

    this.log.info({
      url: req.url,
      status: res.statusCode,
      ms: Math.round(time * 1000) / 1000,
    })

    res.end()
  }

  async route(
    req: IncomingMessage,
    res: ServerResponse
  ): Promise<number> {
    for (const route of this.routes) {
      if (route.match(req)) {
        await route.route(req, res).catch(e => {
          this.log.error(e)
          return 500
        })
        return 200
      }
    }
    return 404
  }

  shutdownHandler(signalOrError: string | Error): void {
    this.shutdown = true

    if (typeof signalOrError === "string") {
      this.log.info({ signal: signalOrError })
    } else if (signalOrError) {
      this.log.error(signalOrError)
    }

    this.server.close(err => {
{{#contains "bigquery" routes}}
      if (err) {
        this.log.error(err)
      }

      if (this.buffer) {
        this.buffer
          .close()
          .then(() => {
            process.exit(err ? 1 : 0)
          })
          .catch(e => {
            this.log.error(e)
            process.exit(1)
          })
      } else {
        process.exit(err ? 1 : 0)
      }
{{/contains}}
{{#excludes "bigquery" routes}}
      if (err) {
        this.log.error(err)
        process.exit(1)
      }

      process.exit()
{{/excludes}}
    })
  }
}
